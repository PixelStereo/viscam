#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
from PySide2.QtUiTools import QUiLoader
from PySide2.QtGui import  QStandardItemModel, QStandardItem
from PySide2.QtCore import Slot, QDir, QAbstractListModel, Qt, QFile
from PySide2.QtWidgets import QWidget, QApplication, QHBoxLayout, QDialog, QListView, QListWidget, QPushButton, \
                            QTableWidget, QTableView, QFileDialog, QTableWidgetItem, QWidget, QTreeView, QMainWindow, \
                            QSpinBox, QGroupBox, QGridLayout, QCheckBox, QSlider, QLabel


def create_properties_panel(self):
    properties_groupbox = QGroupBox()
    properties_groupbox.setTitle('Properties')
    properties_layout = QGridLayout()
    self.power = QCheckBox()
    self.power.setText('Power')
    self.power.clicked.connect(self.on_power_toggled)
    properties_layout.addWidget(self.power, 1, 1, 1, 1)
    self.IR = QCheckBox()
    self.IR.setText('IR')
    self.IR.clicked.connect(self.on_IR_toggled)
    properties_layout.addWidget(self.IR, 1, 2, 1, 1)
    properties_groupbox.setLayout(properties_layout)
    return properties_groupbox

def create_pan_tilt_panel(self):
    pan_tilt_groupbox = QGroupBox()
    pan_tilt_groupbox.setTitle('Pan & Tilt')
    pan_tilt_layout = QGridLayout()
    self.pan = QSpinBox()
    self.pan.valueChanged.connect(self.on_pan_valueChanged)
    self.tilt = QSpinBox()
    self.tilt.valueChanged.connect(self.on_tilt_valueChanged)
    self.pan_speed = QSpinBox()
    self.pan_speed.valueChanged.connect(self.on_pan_speed_valueChanged)
    self.tilt_speed = QSpinBox()
    self.tilt_speed.valueChanged.connect(self.on_tilt_speed_valueChanged)
    self.home = QPushButton()
    self.home.setText('Home')
    self.home.clicked.connect(self.on_home_pressed)
    self.reset = QPushButton()
    self.reset.setText('reset')
    self.reset.clicked.connect(self.on_reset_pressed)
    self.upleft = QPushButton()
    self.upleft.setText('upleft')
    self.upleft.clicked.connect(self.on_upleft_pressed)
    self.upright = QPushButton()
    self.upright.setText('upright')
    self.upright.clicked.connect(self.on_upright_pressed)
    self.downleft = QPushButton()
    self.downleft.setText('downleft')
    self.downleft.clicked.connect(self.on_downleft_pressed)
    self.downright = QPushButton()
    self.downright.setText('downright')
    self.downright.clicked.connect(self.on_downright_pressed)
    self.left = QPushButton()
    self.left.setText('left')
    self.left.clicked.connect(self.on_left_pressed)
    self.right = QPushButton()
    self.right.setText('right')
    self.right.clicked.connect(self.on_right_pressed)
    self.up = QPushButton()
    self.up.setText('up')
    self.up.clicked.connect(self.on_up_pressed)
    self.down = QPushButton()
    self.down.setText('down')
    self.down.clicked.connect(self.on_down_pressed)
    self.stop = QPushButton()
    self.stop.setText('stop')
    self.stop.clicked.connect(self.on_stop_pressed)
    pan_tilt_layout.addWidget(self.tilt_speed, 1, 2, 1, 1)
    pan_tilt_layout.addWidget(self.home, 1, 5, 1, 1)
    pan_tilt_layout.addWidget(self.reset, 2, 5, 1, 1)
    pan_tilt_layout.addWidget(self.pan, 3, 5, 1, 1)
    pan_tilt_layout.addWidget(self.pan_speed, 1, 1, 1, 1)
    pan_tilt_layout.addWidget(self.tilt, 4, 5, 1, 1)
    pan_tilt_layout.addWidget(self.upleft, 2, 1, 1, 1)
    pan_tilt_layout.addWidget(self.up, 2, 2, 1, 1)
    pan_tilt_layout.addWidget(self.upright, 2, 3, 1, 1)
    pan_tilt_layout.addWidget(self.left, 3, 1, 1, 1)
    pan_tilt_layout.addWidget(self.stop, 3, 2, 1, 1)
    pan_tilt_layout.addWidget(self.right, 3, 3, 1, 1)
    pan_tilt_layout.addWidget(self.downleft, 4, 1, 1, 1)
    pan_tilt_layout.addWidget(self.down, 4, 2, 1, 1)
    pan_tilt_layout.addWidget(self.downright, 4, 3, 1, 1)
    pan_tilt_groupbox.setLayout(pan_tilt_layout)
    # initialize speeds
    #self.pan_speed = 5
    #self.tilt_speed = 5
    #self.pan_speed.setValue(5)
    #self.tilt_speed.setValue(5)
    return pan_tilt_groupbox

def create_focus_panel(self):
    focus_groupbox = QGroupBox()
    focus_groupbox.setTitle('Focus')
    focus_layout = QGridLayout()
    self.focus_auto = QPushButton()
    self.focus_auto.setCheckable(1)
    self.focus_auto.setText('Auto')
    self.focus_auto.toggled.connect(self.on_focus_auto_stateChanged)
    self.focus_stop = QPushButton()
    self.focus_stop.setText('Stop')
    self.focus_stop.clicked.connect(self.on_focus_stop_pressed)
    self.focus_near = QPushButton()
    self.focus_near.setText('Near')
    self.focus_near.clicked.connect(self.on_focus_near_pressed)
    self.focus_far = QPushButton()
    self.focus_far.setText('Far')
    self.focus_far.clicked.connect(self.on_focus_far_pressed)
    self.focus_far_speed = QSpinBox()
    self.focus_far_speed.valueChanged.connect(self.on_focus_far_speed_valueChanged)
    self.focus_far_speed_label = QLabel()
    self.focus_far_speed_label.setText('Far Speed')
    self.focus_near_speed = QSpinBox()
    self.focus_near_speed.valueChanged.connect(self.on_focus_near_speed_valueChanged)
    self.focus_near_speed_label = QLabel()
    self.focus_near_speed_label.setText('Near Speed')
    self.focus = QSlider()
    self.focus.setOrientation(Qt.Horizontal)
    self.focus.setMinimum(0)
    self.focus.setMaximum(16384)
    self.focus_direct_value = QSpinBox()
    self.focus_direct_value.setKeyboardTracking(0)
    self.focus_label = QLabel()
    self.focus_label.setText('Focus Value')
    self.focus.valueChanged.connect(self.focus_direct_value.setValue)
    self.focus_direct_value.setMinimum(0)
    self.focus_direct_value.setMaximum(65536)
    self.focus_direct_value.valueChanged.connect(self.on_focus_direct_valueChanged)
    self.focus_nearlimit_label = QLabel()
    self.focus_nearlimit_label.setText('Focus nearlimit')
    self.focus_nearlimit_value = QSpinBox()
    self.focus_nearlimit_value.setKeyboardTracking(0)
    self.focus_nearlimit_value.setMinimum(0)
    self.focus_nearlimit_value.setMaximum(65536)
    self.focus_nearlimit_value.valueChanged.connect(self.on_focus_nearlimit_valueChanged)

    # create a groupbox for all manual settings
    self.focus_manual = QGridLayout()
    self.focus_manual.addWidget(self.focus_near_speed, 2, 1, 1, 1)
    self.focus_manual.addWidget(self.focus_far_speed, 2, 3, 1, 1)
    self.focus_manual.addWidget(self.focus_label, 2, 4, 1, 1)
    self.focus_manual.addWidget(self.focus_near_speed_label, 1, 1, 1, 1)
    self.focus_manual.addWidget(self.focus_far_speed_label, 1, 3, 1, 1)
    #self.focus_manual.addWidget(self.focus, 4, 2, 3, 1)
    self.focus_manual.addWidget(self.focus_near, 3, 1, 1, 1)
    self.focus_manual.addWidget(self.focus_stop, 3, 2, 1, 1)
    self.focus_manual.addWidget(self.focus_far, 3, 3, 1, 1)
    self.focus_manual.addWidget(self.focus_direct_value, 3, 4, 1, 1)
    self.focus_manual.addWidget(self.focus_nearlimit_label, 4, 1, 1, 1)
    self.focus_manual.addWidget(self.focus_nearlimit_value, 4, 2, 1, 1)
    self.focus_manual_box = QGroupBox()
    self.focus_manual_box.setLayout(self.focus_manual)
    focus_layout.addWidget(self.focus_auto, 1, 1, 1, 1)
    focus_layout.addWidget(self.focus_manual_box, 2, 1, 1, 1)
    focus_groupbox.setLayout(focus_layout)
    return focus_groupbox

def create_zoom_panel(self): 
    zoom_groupbox = QGroupBox()
    zoom_groupbox.setTitle('Zoom')
    zoom_layout = QGridLayout()
    self.zoom_stop = QPushButton()
    self.zoom_stop.setText('Stop')
    self.zoom_stop.clicked.connect(self.on_zoom_stop_pressed)
    self.zoom_wide = QPushButton()
    self.zoom_wide.setText('Wide')
    self.zoom_wide.clicked.connect(self.on_zoom_wide_pressed)
    self.zoom_tele = QPushButton()
    self.zoom_tele.setText('Tele')
    self.zoom_tele.clicked.connect(self.on_zoom_tele_pressed)
    self.zoom_tele_speed = QSpinBox()
    self.zoom_tele_speed.valueChanged.connect(self.on_zoom_tele_speed_valueChanged)
    self.zoom_tele_speed_label = QLabel()
    self.zoom_tele_speed_label.setText('Tele Speed')
    self.zoom_wide_speed = QSpinBox()
    self.zoom_wide_speed.valueChanged.connect(self.on_zoom_wide_speed_valueChanged)
    self.zoom_wide_speed_label = QLabel()
    self.zoom_wide_speed_label.setText('Wide Speed')
    self.zoom = QSlider()
    self.zoom.setOrientation(Qt.Horizontal)
    self.zoom.setMinimum(0)
    self.zoom.setMaximum(16384)
    self.zoom_direct_value = QSpinBox()
    self.zoom_direct_value.setKeyboardTracking(0)
    self.zoom_label = QLabel()
    self.zoom_label.setText('Zooom Value')
    self.zoom.valueChanged.connect(self.zoom_direct_value.setValue)
    self.zoom_direct_value.setMinimum(0)
    self.zoom_direct_value.setMaximum(65536)

    self.zoom_direct_value.valueChanged.connect(self.on_zoom_direct_valueChanged)
    
    zoom_layout.addWidget(self.zoom_wide_speed, 2, 1, 1, 1)
    zoom_layout.addWidget(self.zoom_tele_speed, 2, 3, 1, 1)
    zoom_layout.addWidget(self.zoom_label, 2, 4, 1, 1)
    zoom_layout.addWidget(self.zoom_wide_speed_label, 1, 1, 1, 1)
    zoom_layout.addWidget(self.zoom_tele_speed_label, 1, 3, 1, 1)
    #zoom_layout.addWidget(self.zoom, 4, 2, 3, 1)
    zoom_layout.addWidget(self.zoom_wide, 3, 1, 1, 1)
    zoom_layout.addWidget(self.zoom_stop, 3, 2, 1, 1)
    zoom_layout.addWidget(self.zoom_tele, 3, 3, 1, 1)
    zoom_layout.addWidget(self.zoom_direct_value, 3, 4, 1, 1)
    zoom_groupbox.setLayout(zoom_layout)
    self.zoom_tele_speed = 3
    self.zoom_wide_speed = 3
    return zoom_groupbox
